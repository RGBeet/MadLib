[manifest]
version = "1.0.0"
dump_lua = true
priority = -1000

# WIP - adding x_score and e_score
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "x_mult = center.config.Xmult or 1,"
position = "after"
payload = '''
a_score = center.config.Ascore or 0,
x_score = center.config.Xscore or 1,
e_score = center.config.Escore or 1,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif eval_type == 'dollars' then"
position = "before"
payload = '''
elseif eval_type == 'e_mult' then
	sound = 'madlib_emult'
	amt = amt
	text = '^' .. amt
	colour = G.C.DARK_EDITION
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'e_chips' then
	sound = 'madlib_echip'
	amt = amt
	text = '^' .. amt
	colour = G.C.DARK_EDITION
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'a_score' then
	sound = 'madlib_xscore'
	amt = amt
	text = '^' .. amt
	colour = G.C.PURPLE
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'x_score' then
	sound = 'madlib_xscore'
	amt = amt
	text = 'X' .. amt
	colour = G.C.PURPLE
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'e_score' then
	sound = 'madlib_escore'
	amt = amt
	text = '^' .. amt
	colour = G.C.PURPLE
	config.type = 'fade'
	config.scale = 0.7
'''
match_indent = true

# Add a way to gain total chip score easily (for xscore?)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'function evaluate_play_main(text, disp_text, poker_hands, scoring_hand, non_loc_disp_text, percent, percent_delta)'
position = 'after'
match_indent = true
payload = 'total_chip_score = G.GAME.chips'

# Add new colors
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''legendary = G.C.RARITY[4],'''
position = "after"
match_indent = true
overwrite = true
payload = '''pow = G.C.POW or G.C.GREEN,
emult 	= G.C.EMULT,
echips = G.C.ECHIPS,
escore	= G.C.ESCORE,
'''

# Making a hook function
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """        hand_chips = mod_chips(G.GAME.hands[text].chips)"""
position = "after"
payload = '''total_score = G.GAME.chips'''
match_indent = true

# This also accounts for Paya's Terrible Addons, which does something similar.
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''math\.floor\(hand_chips\*mult\)'''
position = 'at'
payload = '''math.floor(MadLib.get_full_score(hand_chips,mult))'''
match_indent = true
times = 10

# get the sell ui thingy idk man
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.T, config={text = localize('$'),colour = G.C.WHITE, scale = 0.4, shadow = true}},'''
position = 'at'
payload = '''MadLib.define_get_currency_sell_ui(card),'''
match_indent = true
times = 1

# Does the hand pass the check?!
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then"
position = 'at'
payload = '''if
    not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text)
    and MadLib.hand_passes_check(G.play.cards, poker_hands, text)
then'''
match_indent = true
times = 1

# Exclude cards?!
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''results.top = nil'''
position = 'after'
payload = '''
    -- remove poker hands
    if G.GAME.modifiers.poker_hand_blacklist then
        MadLib.loop_func(G.GAME.modifiers.poker_hand_blacklist, function(v)
        results[k] = nil
    end
end)'''
match_indent = true

# Add alt throw hand value
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'''
position = 'at'
payload = '''if G.GAME.blind and (G.boss_throw_hand or G.throw_hand) and self.STATE == self.STATES.SELECTING_HAND then'''
match_indent = true

# Add to cardarea
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''G.boss_throw_hand = nil'''
position = 'after'
payload = '''G.throw_hand = nil'''
match_indent = true

# Checks if hand passes the check
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''else

        end'''
position = 'at'
payload = '''else
            G.throw_hand = (not MadLib.hand_passes_check(G.hand.highlighted, poker_hands, text)) or nil
        end'''
match_indent = true

# Allow editing of destination
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "local drawn = nil"
position = "after"
payload = '''to = MadLib.edit_card_destination(card,from,to)'''
match_indent = true


# Specific Suit editing
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if SMODS.has_no_suit(self) then
            return false
        end'''
position = "after"
payload = '''if self.config.center.specific_suit then
            return self.config.center.specific_suit == suit
        end'''
match_indent = true
times = 2

# Specific Suit editing
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''return {n=G.UIT.ROOT, config = {align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK}, nodes={'''
position = "before"
payload = '''
contents = MadLib.edit_uibox_contents(contents, scale)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if (id > 0 and rank and rank.face) or next(find_joker("Pareidolia")) then'
position = "at"
payload = 'if (id > 0 and rank and rank.face) or MadLib.get_pareidolia(self) then'
match_indent = true

# Sell a card multiple times?
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''card:sell_card()
    SMODS.calculate_context({selling_card = true, card = card})'''
position = "at"
payload = '''card:sell_card()
for i=1, card:get_quantity_value() do
	SMODS.calculate_context({selling_card = true, card = card}))
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('Astronomer') > 0 then self.cost = 0 end"
position = "at"
payload = "if self:ml_is_free() then self.cost = 0 end"
match_indent = true


[[patches]]
[patches.pattern]
target = "state_events.lua"
pattern = '''mult = mod_mult(G.GAME.hands[text].mult)
        hand_chips = mod_chips(G.GAME.hands[text].chips)'''
position = "after"
payload = '''MadLib.calculate_mult({
}
MadLib.calculate_chips({
}
'''
match_indent = true

