[manifest]
version = "1.0.0"
dump_lua = true
priority = -1000

# WIP - adding x_score and e_score
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "x_mult = center.config.Xmult or 1,"
position = "after"
payload = '''
x_score = center.config.Xscore or 0,
e_score = center.config.Escore or 0,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif eval_type == 'dollars' then"
position = "before"
payload = '''
elseif eval_type == 'x_score' then
	sound = 'talisman_xchip'
	amt = amt
	text = 'X' .. amt
	colour = G.C.PURPLE
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'e_score' then
	sound = 'talisman_echip'
	amt = amt
	text = '^' .. amt
	colour = G.C.PURPLE
	config.type = 'fade'
	config.scale = 0.7
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects[ii].message then"
position = "before"
payload = '''
if effects[ii].x_score then
	mod_percent = true
    total_chip_score = total_chip_score * effects[ii].x_score
	card_eval_status_text(G.hand.cards[i], 'x_score', effects[ii].x_chips, percent)
end
if effects[ii].e_score then
	mod_percent = true
    total_chip_score = total_chip_score ^ effects[ii].e_score
	card_eval_status_text(G.hand.cards[i], 'e_score', effects[ii].e_chips, percent)
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = 'if not smods_xchips then'
position = 'before'
match_indent = true
payload = '''
for _, v in ipairs({'x_score', 'e_score', 'xscore', 'escore', 'Xscore_mod', 'Escore_mod'}) do
	table.insert(SMODS.calculation_keys, v)
end
'''

#TODO: find diff way when Talisman is not installed?
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = '''if (key == 'hyper_mult' or key == 'hypermult' or key == 'hypermult_mod') and type(amount) == 'table' then
      if effect.card then juice_card(effect.card) end
      mult = mod_mult(mult:arrow(amount[1], amount[2]))
      update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
      if not effect.remove_default_message then
          if from_edition then
              card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = ((amount[1] > 5 and ('{' .. amount[1] .. '}') or string.rep('^', amount[1])) .. amount[2]).." Mult", colour =  G.C.EDITION, edition = true})
          elseif key ~= 'hypermult_mod' then
              if effect.hypermult_message then
                  card_eval_status_text(scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.hypermult_message)
              else
                  card_eval_status_text(scored_card or effect.card or effect.focus, 'hyper_mult', amount, percent)
              end
          end
      end
      return true
    end'''
position = 'after'
match_indent = true
payload = '''
if (key == 'x_score' or key == 'xscore' or key == 'Xscore_mod') and amount ~= 1 then
        if effect.card then juice_card(effect.card) end
        G.GAME.chips = mod_total_score(G.GAME.chips * amount)

        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = "X"..amount.." Score", colour =  G.C.EDITION, edition = true})
            elseif key ~= 'Xscore_mod' then
                if effect.xchip_message then
                    card_eval_status_text(scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.xscore_message)
                else
                    card_eval_status_text(scored_card or effect.card or effect.focus, 'x_score', amount, percent)
                end
            end
        end
        return true
    end

    if (key == 'e_score' or key == 'escore' or key == 'Escore_mod') and amount ~= 1 then
        if effect.card then juice_card(effect.card) end
        G.GAME.chips = mod_total_score(G.GAME.chips ^ amount)
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = "^"..amount.." Score", colour =  G.C.EDITION, edition = true})
            elseif key ~= 'Escore_mod' then
                if effect.escore_message then
                    card_eval_status_text(scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.escore_message)
                else
                    card_eval_status_text(scored_card or effect.card or effect.focus, 'e_score', amount, percent)
                end
            end
        end
        return true
    end'''

# Add a way to gain total chip score easily (for xscore?)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'function evaluate_play_main(text, disp_text, poker_hands, scoring_hand, non_loc_disp_text, percent, percent_delta)'
position = 'after'
match_indent = true
payload = 'total_chip_score = G.GAME.chips'

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'local hand = (G.GAME.hands[text])'
position = 'after'
match_indent = true
payload = '''total_chip_score = G.GAME.chips
SMODS.calculate_context({ rgmc_before_scoring = true })'''



[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if effects[ii].edition.p_dollars_mod then'
position = 'before'
match_indent = true
payload = '''
if scoring_hand and scoring_hand[i] and scoring_hand[i].edition then
	local trg = scoring_hand[i]
	local edi = trg.edition
	if edi.x_score then
        total_chip_score = mod_total_score(total_chip_score * edi.x_score)
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = 'X'.. edi.x_score ,
		edition = true,
		x_score = true})
	end
	if edi.e_score then
        total_chip_score = mod_total_score(total_chip_score ^ edi.e_score)
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^'.. edi.e_score ,
		edition = true,
		e_score = true})
	end
end
'''

# Add new colors
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''legendary = G.C.RARITY[4],'''
position = "after"
match_indent = true
overwrite = true
payload = '''pow = G.C.POW or G.C.GREEN,
emult 	= G.C.EMULT,
echips = G.C.ECHIPS,
escore	= G.C.ESCORE,
'''

# Making a hook function
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """        hand_chips = mod_chips(G.GAME.hands[text].chips)"""
position = "after"
payload = '''local chipmult_mod = MadLib.base_cm_mod(G.play.cards,{text,disp_text,poker_hands,scoring_hand,non_loc_disp_text}, hand_chips, mult)'''
match_indent = true

# This also accounts for Paya's Terrible Addons, which does something similar.
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''math\.floor\(hand_chips\*mult\)'''
position = 'at'
payload = '''math.floor(MadLib.get_full_score(hand_chips,mult))'''
match_indent = true
times = 10

# get the sell ui thingy idk man
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.T, config={text = localize('$'),colour = G.C.WHITE, scale = 0.4, shadow = true}},'''
position = 'at'
payload = '''MadLib.define_get_currency_sell_ui(card),'''
match_indent = true
times = 1

# Does the hand pass the check?!
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then"
position = 'at'
payload = '''if
    not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text)
    and MadLib.hand_passes_check(G.play.cards, poker_hands, text)
then'''
match_indent = true
times = 1

# Exclude cards?!
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''results.top = nil'''
position = 'after'
payload = '''
    -- remove poker hands
    if G.GAME.modifiers.poker_hand_blacklist then
        MadLib.loop_func(G.GAME.modifiers.poker_hand_blacklist, function(v)
        results[k] = nil
    end
end)'''
match_indent = true

# Add alt throw hand value
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'''
position = 'at'
payload = '''if G.GAME.blind and (G.boss_throw_hand or G.throw_hand) and self.STATE == self.STATES.SELECTING_HAND then'''
match_indent = true

# Add to cardarea
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''G.boss_throw_hand = nil'''
position = 'after'
payload = '''G.throw_hand = nil'''
match_indent = true

# Checks if hand passes the check
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''else

        end'''
position = 'at'
payload = '''else
            G.throw_hand = (not MadLib.hand_passes_check(G.hand.highlighted, poker_hands, text)) or nil
        end'''
match_indent = true

# Allow editing of destination
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "local drawn = nil"
position = "after"
payload = '''to = MadLib.edit_card_destination(card,from,to)'''
match_indent = true